{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/Cardlist.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","alt","src","cardsList","robots","map","element","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","length","Cardlist","React","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCHSC,EAbF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,MAErB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAK,SAASC,IAAG,+BAA2BL,EAA3B,mBACtB,6BACI,4BAAKC,GACL,2BAAIC,MCsBLI,EA3BG,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAGhB,OACI,6BAEMA,EAAOC,KAAI,SAACC,EAAQC,GAClB,OAEI,kBAAC,EAAD,CACAC,IAAOD,EACPV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,WAT7B,MCQOU,EAdG,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aAChB,OACI,yBAAKV,UAAW,OACZ,2BACIA,UAAW,mCACXW,KAAO,SACPC,YAAc,iBACdC,SAAYH,MCKbI,G,MAZA,SAACC,GACZ,OAEI,yBAAKC,MAAO,CAAEC,SAAU,WACnBF,EAAMG,YCyCJC,E,kDAxCX,aAAc,IAAD,8BACT,gBAYJC,eAAe,SAACC,GACZ,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAZzC,EAAKC,MAAQ,CACTtB,OAAQ,GACRmB,YAAa,IAJR,E,gEAQO,IAAD,OACfI,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC7EF,MAAK,SAAAG,GAAQ,EAAKT,SAAS,CAAClB,OAAS2B,S,+BASjC,IAAD,OACEC,EAAiBC,KAAKP,MAAMtB,OAAO8B,QAAO,SAACC,GAC7C,OAAOA,EAAMrC,KAAKsC,cAAcC,SAAS,EAAKX,MAAMH,YAAYa,kBAEpE,OAAgC,IAA7BH,KAAKP,MAAMtB,OAAOkC,OACV,wBAAItC,UAAU,MAAd,WAGH,yBAAKA,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAgBuB,KAAKb,iBAChC,kBAAC,EAAD,KACI,kBAACmB,EAAD,CAAUnC,OAAU4B,U,GAhC1BQ,IAAMC,WCExBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,6BACA,kBAAC,EAAD,QAGFC,SAASC,eAAe,SNqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8f77c6f5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({id, name, email}) =>{\r\n\r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt ='robots' src ={`https://robohash.org/${id}?size=200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst cardsList = ({robots}) =>{\r\n    \r\n    \r\n    return(\r\n        <div>\r\n            {\r\n              robots.map((element,i) =>{\r\n                return(\r\n        \r\n                    <Card \r\n                    key = {i}\r\n                    id={robots[i].id} \r\n                    name={robots[i].name} \r\n                    email={robots[i].email}\r\n                    />\r\n\r\n                 );\r\n             })\r\n             \r\n            };\r\n            \r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default cardsList;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // <Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\r\n    //   <Card id={robots[1].id} name={robots[1].name} email={robots[1].email} />\r\n    //   <Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>\r\n\r\n    // cardsArray = robots.map(()=>{\r\n    //     {<Card id={robots[indox].id} name={robots[indox].name} email={robots[indox].email}/>},indox)\r\n    // }","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange})=>{\r\n    return(\r\n        <div className ='pa2'>\r\n            <input\r\n                className ='pa3 ba b--green bg-lightest-blue'\r\n                type = 'search'\r\n                placeholder = 'Search a Robot'\r\n                onChange = {searchChange}\r\n             />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default SearchBox;","import React from 'react'\r\n\r\nconst Scroll = (props)=>{\r\n    return(\r\n\r\n        <div style={{ overflow: 'scroll'}}>\r\n            {props.children}\r\n            \r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport Cardlist from '../Components/Cardlist'\r\nimport SearchBox from '../Components/SearchBox'\r\nimport './App.css'\r\nimport Scroll from '../Components/Scroll'\r\n\r\nclass App extends React.Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json())\r\n        .then(users=>{this.setState({robots : users})})\r\n    }\r\n\r\n    onSearchChange=(event)=>{\r\n        this.setState({searchfield: event.target.value})\r\n       // console.log(event.target.value);\r\n        \r\n    }\r\n\r\n    render(){\r\n        const filteredRobots = this.state.robots.filter((robot)=>{\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n        })\r\n        if(this.state.robots.length === 0){\r\n            return <h1 className='f1'>Loading</h1>\r\n        }else{\r\n            return(\r\n                <div className='tc'>\r\n                    <h1 className='f1'>Robofriends</h1>\r\n                    <SearchBox searchChange = {this.onSearchChange} />\r\n                    <Scroll>\r\n                        <Cardlist robots = {filteredRobots}></Cardlist>\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n};\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './Containers/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <div>\n    <App></App>\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}